{
  "atoms": [
    "\n        ; Identity patterns\n        (= (HasIdentity $user-id)\n           (User $user-id $_))\n           \n        ; Verification patterns\n        (= (IsVerified $user-id)\n           (HasVerification $user-id $_ $_))\n           \n        ; Skill matching rule\n        (= (HasRelevantSkill $user-id $skill-name)\n           (HasSkill $user-id $skill-name $_))\n           \n        ; Contribution verification rule base\n        (= (CanVerify $contribution-id)\n           (and (Contribution $contribution-id $user-id $_)\n                (HasIdentity $user-id)\n                (HasEvidence $contribution-id $_)))\n        ",
    "\n        ; Auto-award rule with confidence scoring\n        (= (AutoAward $user-id $contribution-id)\n           (let* (($verified (VerifyContribution $contribution-id))\n                  ($confidence (CalculateConfidence $contribution-id))\n                  ($base-amount 50)\n                  ($bonus (* $confidence 50))\n                  ($total (+ $base-amount $bonus)))\n             (if $verified\n                 (IncreaseToken $user-id $total)\n                 (TokenBalance $user-id (GetTokenBalance $user-id)))))\n        \n        ; Default confidence calculation\n        (= (CalculateConfidence $contribution-id)\n           (let* (($evidence-count (CountEvidence $contribution-id))\n                  ($verification-count (CountVerifications $contribution-id))\n                  ($base-confidence 0.5)\n                  ($evidence-factor (* $evidence-count 0.1))\n                  ($verification-factor (* $verification-count 0.2)))\n             (min 1.0 (+ $base-confidence $evidence-factor $verification-factor))))\n        ",
    ";; MeTTa Rules for Nimo Platform\n;; This file contains core MeTTa rules for autonomous verification,\n;; reputation scoring, and token award calculations.\n;; Updated based on research findings in docs/metta_research_findings.md\n\n;; =============================\n;; IDENTITY & USER MANAGEMENT\n;; =============================\n\n;; Identity verification\n(= (VerifyUser $user-id)\n   (and (User $user-id $_)\n        (or (HasVerifiedEmail $user-id)\n            (HasVerifiedDID $user-id))))\n\n;; DID verification rule\n(= (HasVerifiedDID $user-id)\n   (DIDVerification $user-id $_ $_))\n\n;; Email verification rule\n(= (HasVerifiedEmail $user-id)\n   (EmailVerification $user-id $_ $_))\n\n;; =============================\n;; CONTRIBUTION VERIFICATION\n;; =============================\n\n;; Main verification rule - atom-based implementation\n(= (VerifyContribution $contrib-id)\n   (and (Contribution $contrib-id $user-id $_)\n        (ValidEvidence $contrib-id)\n        (SkillMatch $contrib-id $user-id)\n        (ImpactAssessment $contrib-id \"moderate\")))\n\n;; Evidence validation rules\n(= (ValidEvidence $contrib-id)\n   (let* (($evidence-count (CountEvidence $contrib-id))\n          ($min-evidence 1))\n     (>= $evidence-count $min-evidence)))\n\n;; GitHub repository validation\n(= (HasGithubEvidence $contrib-id)\n   (Evidence $_ $contrib-id \"github\" $_))\n\n;; Website with proof validation\n(= (HasWebsiteEvidence $contrib-id)\n   (Evidence $_ $contrib-id \"website\" $_))\n\n;; Document with signature validation\n(= (HasDocumentEvidence $contrib-id)\n   (and (Evidence $_ $contrib-id \"document\" $_)\n        (HasSignature $contrib-id $_)))\n\n;; Skill matching - atom-based implementation\n(= (SkillMatch $contrib-id $user-id)\n   (let* (($category (GetContributionCategory $contrib-id))\n          ($required-skills (RequiredSkillsForCategory $category)))\n     (UserHasAnySkill $user-id $required-skills)))\n\n;; Helper to check if user has any required skills\n(= (UserHasAnySkill $user-id $skills)\n   (or (Empty $skills)\n       (or (HasSkill $user-id (First $skills) $_)\n           (UserHasAnySkill $user-id (Rest $skills)))))\n\n;; Get contribution category\n(= (GetContributionCategory $contrib-id)\n   (let* (($contribution (Contribution $contrib-id $_ $category)))\n     $category))\n\n;; Define required skills for categories\n(= (RequiredSkillsForCategory \"coding\")\n   (List \"programming\" \"software development\" \"coding\"))\n   \n(= (RequiredSkillsForCategory \"education\")\n   (List \"teaching\" \"curriculum\" \"tutoring\"))\n   \n(= (RequiredSkillsForCategory \"volunteer\")\n   (List \"community service\" \"organizing\"))\n   \n(= (RequiredSkillsForCategory $_)\n   (List))\n\n;; =============================\n;; IMPACT ASSESSMENT\n;; =============================\n\n;; Impact assessment - atom-based implementation\n(= (ImpactAssessment $contrib-id $min-level)\n   (let* (($impact (GetImpactLevel $contrib-id))\n          ($sufficient (ImpactLevelSufficient $impact $min-level)))\n     $sufficient))\n\n;; Get impact level from contribution\n(= (GetImpactLevel $contrib-id)\n   (let* (($impact (ContributionImpact $contrib-id $level)))\n     (if $impact $level \"minimal\")))\n\n;; Check if impact level is sufficient\n(= (ImpactLevelSufficient $actual $minimum)\n   (let* (($impact-levels (List \"minimal\" \"moderate\" \"significant\" \"transformative\"))\n          ($actual-pos (PositionInList $actual $impact-levels))\n          ($min-pos (PositionInList $minimum $impact-levels)))\n     (>= $actual-pos $min-pos)))\n\n;; Helper to find position in list\n(= (PositionInList $item $list)\n   (PositionInListHelper $item $list 0))\n\n(= (PositionInListHelper $item $list $pos)\n   (if (Empty $list)\n       -1\n       (if (== $item (First $list))\n           $pos\n           (PositionInListHelper $item (Rest $list) (+ $pos 1)))))\n\n;; =============================\n;; CONFIDENCE SCORING\n;; =============================\n\n;; Calculate confidence for verification decision\n(= (CalculateConfidence $contrib-id)\n   (let* (($evidence-score (EvidenceScore $contrib-id))\n          ($reputation-score (ReputationScore $contrib-id))\n          ($consistency-score (ConsistencyScore $contrib-id)))\n     (/ (+ $evidence-score $reputation-score $consistency-score) 3.0)))\n\n;; Evidence score calculation - atom-based\n(= (EvidenceScore $contrib-id)\n   (let* (($github-evidence (HasGithubEvidence $contrib-id))\n          ($website-evidence (HasWebsiteEvidence $contrib-id))\n          ($document-evidence (HasDocumentEvidence $contrib-id))\n          ($evidence-count (CountEvidence $contrib-id)))\n     (if $github-evidence\n         0.9\n         (if $document-evidence\n             0.7\n             (if $website-evidence\n                 0.6\n                 (if (> $evidence-count 0)\n                     0.5\n                     0.0))))))\n\n;; Reputation score calculation\n(= (ReputationScore $contrib-id)\n   (let* (($user-id (GetContributorId $contrib-id))\n          ($user-reputation (UserReputation $user-id $score)))\n     (if $user-reputation\n         (min 1.0 (/ $score 100.0))\n         0.5)))\n\n;; Consistency score calculation\n(= (ConsistencyScore $contrib-id)\n   (let* (($user-id (GetContributorId $contrib-id))\n          ($past-contributions (CountUserContributions $user-id))\n          ($verification-rate (UserVerificationRate $user-id $rate)))\n     (if (< $past-contributions 3)\n         0.5\n         (if $verification-rate\n             (min 1.0 $rate)\n             0.5))))\n\n;; =============================\n;; VERIFICATION WITH CONFIDENCE\n;; =============================\n\n;; Full verification with confidence\n(= (VerifyWithConfidence $contrib-id)\n   (let* (($verified (VerifyContribution $contrib-id))\n          ($confidence (CalculateConfidence $contrib-id))\n          ($explanation (if $verified\n                           (GeneratePositiveExplanation $contrib-id $confidence)\n                           (GenerateNegativeExplanation $contrib-id $confidence))))\n     (VerificationResult $contrib-id $verified $confidence $explanation)))\n\n;; Get contributor ID from contribution\n(= (GetContributorId $contrib-id)\n   (let* (($contrib (Contribution $contrib-id $user-id $_)))\n     $user-id))\n\n;; Count user contributions\n(= (CountUserContributions $user-id)\n   (let* (($contributions (Contribution $_ $user-id $_)))\n     (Length $contributions)))\n\n;; Count evidence for a contribution\n(= (CountEvidence $contrib-id)\n   (let* (($evidence-list (Evidence $_ $contrib-id $_ $_)))\n     (Length $evidence-list)))\n\n;; =============================\n;; EXPLANATION GENERATION\n;; =============================\n\n;; Generate explanation for positive verification\n(= (GeneratePositiveExplanation $contrib-id $confidence)\n   (let* (($primary-factor (GetPrimaryFactor $contrib-id))\n          ($formatted-confidence (FormatPercentage $confidence)))\n     (JoinStrings \n       \"Contribution verified with \" $formatted-confidence \" confidence. \"\n       \"Key factor: \" $primary-factor)))\n\n;; Generate explanation for negative verification\n(= (GenerateNegativeExplanation $contrib-id $confidence)\n   (let* (($reason (GetRejectionReason $contrib-id))\n          ($formatted-confidence (FormatPercentage $confidence)))\n     (JoinStrings \n       \"Contribution could not be verified with sufficient confidence (\" $formatted-confidence \"). \"\n       \"Reason: \" $reason)))\n\n;; Get primary factor for verification\n(= (GetPrimaryFactor $contrib-id)\n   (cond ((HasGithubEvidence $contrib-id) \"Strong GitHub repository evidence\")\n         ((HasDocumentEvidence $contrib-id) \"Document with signature\")\n         ((HasWebsiteEvidence $contrib-id) \"Website evidence\")\n         (else \"Provided evidence\")))\n\n;; Get rejection reason\n(= (GetRejectionReason $contrib-id)\n   (let* (($user-id (GetContributorId $contrib-id))\n          ($evidence-count (CountEvidence $contrib-id))\n          ($user-reputation-atom (UserReputation $user-id $reputation))\n          ($user-reputation (if $user-reputation-atom $reputation 0))\n          ($verification-rate-atom (UserVerificationRate $user-id $rate))\n          ($verification-rate (if $verification-rate-atom $rate 0)))\n     (cond ((== $evidence-count 0) \"Insufficient evidence provided\")\n           ((< $user-reputation 30) \"User reputation below threshold\")\n           ((< $verification-rate 0.3) \"Low historical verification rate\")\n           (else \"Multiple verification criteria not met\"))))\n\n;; Format percentage helper\n(= (FormatPercentage $value)\n   (let* (($percentage (* $value 100))\n          ($rounded (Round $percentage)))\n     (JoinStrings $rounded \"%\")))\n\n;; String join helper\n(= (JoinStrings $s1 $s2)\n   (StringConcat $s1 $s2))\n   \n(= (JoinStrings $s1 $s2 $s3)\n   (StringConcat $s1 (StringConcat $s2 $s3)))\n   \n(= (JoinStrings $s1 $s2 $s3 $s4)\n   (StringConcat $s1 (StringConcat $s2 (StringConcat $s3 $s4))))\n   \n(= (JoinStrings $s1 $s2 $s3 $s4 $s5)\n   (StringConcat $s1 (StringConcat $s2 (StringConcat $s3 (StringConcat $s4 $s5)))))\n\n;; Round helper\n(= (Round $num)\n   (Floor (+ $num 0.5)))\n\n;; =============================\n;; FRAUD DETECTION\n;; =============================\n\n;; Detect fraud for contribution - atom-based\n(= (DetectFraud $contrib-id)\n   (let* (($user-id (GetContributorId $contrib-id)))\n     (or (DuplicateSubmission $contrib-id $user-id)\n         (SuspiciousActivityPattern $user-id)\n         (EvidenceInconsistency $contrib-id))))\n\n;; Detect duplicate submissions\n(= (DuplicateSubmission $contrib-id $user-id)\n   (let* (($evidence-urls (GetEvidenceUrls $contrib-id))\n          ($other-contribs (OtherContributions $user-id $contrib-id))\n          ($similar-found (CheckDuplicateEvidence $evidence-urls $other-contribs)))\n     $similar-found))\n\n;; Get evidence URLs for a contribution\n(= (GetEvidenceUrls $contrib-id)\n   (EvidenceUrlsHelper (Evidence $_ $contrib-id $_ $_)))\n\n(= (EvidenceUrlsHelper $evidence-atoms)\n   (if (Empty $evidence-atoms)\n       (List)\n       (let* (($first-evidence (First $evidence-atoms))\n              ($url (GetEvidenceUrl $first-evidence))\n              ($rest-urls (EvidenceUrlsHelper (Rest $evidence-atoms))))\n         (Cons $url $rest-urls))))\n\n(= (GetEvidenceUrl $evidence-atom)\n   (nth 3 $evidence-atom))\n\n;; Get other contributions by the same user\n(= (OtherContributions $user-id $current-contrib-id)\n   (filter (lambda ($c) (!= (nth 0 $c) $current-contrib-id))\n           (Contribution $_ $user-id $_)))\n\n;; Check for duplicate evidence across contributions\n(= (CheckDuplicateEvidence $urls $other-contribs)\n   (if (Empty $urls)\n       #f\n       (if (Empty $other-contribs)\n           #f\n           (or (ContributionHasUrl (First $other-contribs) (First $urls))\n               (CheckDuplicateEvidence (Rest $urls) $other-contribs)\n               (CheckDuplicateEvidence $urls (Rest $other-contribs))))))\n\n;; Detect suspicious activity patterns based on timestamps\n(= (SuspiciousActivityPattern $user-id)\n   (let* (($submission-times (GetSubmissionTimes $user-id))\n          ($rapid-submissions (HasRapidSubmissions $submission-times 3600))) ;; 1 hour\n     $rapid-submissions))\n\n;; Check evidence consistency\n(= (EvidenceInconsistency $contrib-id)\n   (let* (($evidence-list (Evidence $_ $contrib-id $_ $_))\n          ($metadata (ContributionMetadata $contrib-id $_))\n          ($dates-consistent (CheckDateConsistency $evidence-list $metadata))\n          ($author-consistent (CheckAuthorConsistency $contrib-id)))\n     (not (and $dates-consistent $author-consistent))))\n\n;; =============================\n;; TOKEN AWARD CALCULATION\n;; =============================\n\n;; Calculate token award based on contribution type\n(= (CalculateTokenAward $contrib-id)\n   (let* (($category (GetContributionCategory $contrib-id))\n          ($base-amount (BaseTokenAmount $category))\n          ($confidence (CalculateConfidence $contrib-id))\n          ($quality-bonus (* $confidence 50))\n          ($total-amount (+ $base-amount $quality-bonus)))\n     $total-amount))\n\n;; Base token amount by category\n(= (BaseTokenAmount $category)\n   (match $category\n     (\"coding\" 75)\n     (\"education\" 60)\n     (\"volunteer\" 50)\n     (\"activism\" 65)\n     (\"leadership\" 70)\n     (\"entrepreneurship\" 80)\n     (\"environmental\" 70)\n     (\"community\" 60)\n     (_ 50)))\n\n;; Award tokens with explanation\n(= (AwardTokens $contrib-id)\n   (let* (($verification (VerifyWithConfidence $contrib-id))\n          ($verified (nth 1 $verification))\n          ($user-id (GetContributorId $contrib-id)))\n     (if $verified\n         (let* (($amount (CalculateTokenAward $contrib-id))\n                ($previous-balance (GetTokenBalance $user-id))\n                ($new-balance (+ $previous-balance $amount)))\n           (UpdateTokenBalance $user-id $new-balance)\n           (AwardResult $contrib-id $user-id $amount \"Success\" $new-balance))\n         (AwardResult $contrib-id $user-id 0 \"Failed verification\" \n                     (GetTokenBalance $user-id)))))\n\n;; =============================\n;; REPUTATION CALCULATION\n;; =============================\n\n;; Calculate user reputation - atom-based\n(= (CalculateUserReputation $user-id)\n   (let* (($verified-contribs (CountVerifiedContributions $user-id))\n          ($skill-diversity (CountUniqueSkills $user-id))\n          ($community-endorsements (CountEndorsements $user-id))\n          ($impact-score (AverageImpactScore $user-id)))\n     (+ (* $verified-contribs 10)\n        (* $skill-diversity 5)\n        (* $community-endorsements 3)\n        (* $impact-score 7))))\n\n;; Count verified contributions\n(= (CountVerifiedContributions $user-id)\n   (Length (VerifiedContributions $user-id)))\n\n(= (VerifiedContributions $user-id)\n   (filter (lambda ($c) (VerifyContribution (nth 0 $c)))\n           (Contribution $_ $user-id $_)))\n\n;; Count unique skills\n(= (CountUniqueSkills $user-id)\n   (Length (UniqueSkills $user-id)))\n\n(= (UniqueSkills $user-id)\n   (UniqueItems (map (lambda ($s) (nth 1 $s))\n                     (HasSkill $user-id $_ $_))))\n\n;; Helper for unique items in a list\n(= (UniqueItems $list)\n   (UniqueItemsHelper $list (List)))\n\n(= (UniqueItemsHelper $list $seen)\n   (if (Empty $list)\n       $seen\n       (let* (($item (First $list))\n              ($rest (Rest $list)))\n         (if (In $item $seen)\n             (UniqueItemsHelper $rest $seen)\n             (UniqueItemsHelper $rest (Cons $item $seen))))))\n\n;; =============================\n;; UTILITY FUNCTIONS\n;; =============================\n\n;; List helpers\n(= (Empty $list)\n   (== $list (List)))\n\n(= (First $list)\n   (car $list))\n\n(= (Rest $list)\n   (cdr $list))\n\n(= (Length $list)\n   (if (Empty $list)\n       0\n       (+ 1 (Length (Rest $list)))))\n\n(= (In $item $list)\n   (if (Empty $list)\n       #f\n       (or (== $item (First $list))\n           (In $item (Rest $list)))))\n\n;; List constructor shortcuts\n(= (List) ())\n(= (List $a) ($a))\n(= (List $a $b) ($a $b))\n(= (List $a $b $c) ($a $b $c))\n(= (List $a $b $c $d) ($a $b $c $d))\n(= (List $a $b $c $d $e) ($a $b $c $d $e))\n\n;; Math helpers\n(= (Floor $num)\n   (int $num))\n\n;; =============================\n;; END OF RULES\n;; =============================",
    "(User \"user1\" \"Alice\")",
    "(User \"user2\" \"Bob\")",
    "(HasSkill \"user1\" \"coding\" 4)",
    "(HasSkill \"user1\" \"music\" 3)",
    "(HasSkill \"user2\" \"art\" 5)",
    "(HasSkill \"user2\" \"writing\" 4)",
    "(Contribution \"contrib1\" \"user1\" \"coding\")",
    "(ContributionTitle \"contrib1\" \"Calculator App\")",
    "(Contribution \"contrib2\" \"user2\" \"education\")",
    "(ContributionTitle \"contrib2\" \"Programming Tutorial\")",
    "(Evidence \"evidence-contrib1-github\" \"contrib1\" \"github\" \"https://github.com/alice/calculator\")",
    "(Evidence \"evidence-contrib2-website\" \"contrib2\" \"website\" \"https://bob-tutorials.com/programming\")",
    "(HasVerification \"contrib1\" \"CodeSchool\" None)",
    "(TokenBalance \"user1\" 100)",
    "(TokenBalance \"user2\" 75)"
  ],
  "version": "1.0"
}